parameters:
- name: arch
  type: string
  values:
  - amd64
  - armhf
  - arm64
  default: amd64

- name: pool
  type: string
  values:
  - sonicbld-1es
  - sonicbld-armhf
  - sonicbld-arm64
  - default
  default: default

- name: timeout
  type: number
  default: 60

- name: sonic_slave
  type: string

- name: sairedis_artifact_name
  type: string

- name: sairedis_artifact_project
  type: string
  default: 'build'

- name: sairedis_artifact_pipeline
  type: string
  default: 'Azure.sonic-sairedis'

- name: sairedis_artifact_branch
  type: string
  default: '$(BUILD_BRANCH)'

- name: sairedis_artifact_pattern
  type: string
  default: '**'

- name: swss_common_artifact_name
  type: string

- name: swss_common_branch
  type: string
  default: '$(BUILD_BRANCH)'

- name: artifact_name
  type: string

- name: archive_pytests
  type: boolean
  default: false

- name: archive_gcov
  type: boolean
  default: false

- name: common_lib_artifact_name
  type: string

- name: common_lib_artifact_project
  type: string
  default: 'build'

- name: common_lib_artifact_pipeline
  type: string
  default: 'Azure.sonic-buildimage.common_libs'

- name: common_lib_artifact_branch
  type: string
  default: '$(BUILD_BRANCH)'

- name: asan
  type: boolean
  default: false

jobs:
- job:
  displayName: ${{ parameters.arch }}
  timeoutInMinutes: ${{ parameters.timeout }}

  pool:
    ${{ if ne(parameters.pool, 'default') }}:
      name: ${{ parameters.pool }}
    ${{ else }}:
      vmImage: 'ubuntu-20.04'

  container:
    image: sonicdev-microsoft.azurecr.io:443/${{ parameters.sonic_slave }}:latest

  steps:
  - checkout: self
    clean: true
    submodules: true
  - script: |
      sudo apt-get update
      sudo apt-get install -y \
        libhiredis-dev \
        libzmq3-dev \
        swig4.0 \
        libdbus-1-dev \
        libteam-dev
      sudo pip3 install lcov_cobertura
    displayName: "Install dependencies"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: Azure.sonic-buildimage-msft.PR
      artifact: sonic-buildimage.vs
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/202412'
      # allowPartiallySucceededBuilds: true
      path: $(Build.ArtifactStagingDirectory)/download
      patterns: |
        **/bookworm/libswsscommon_1.0.0_${{ parameters.arch }}.deb
        **/bookworm/libswsscommon-dev_1.0.0_${{ parameters.arch }}.deb
        **/bookworm/libsaivs_*.deb
        **/bookworm/libsaivs-dev_*.deb
        **/bookworm/libsairedis_*.deb
        **/bookworm/libsairedis-dev_*.deb
        **/bookworm/libsaimetadata_*.deb
        **/bookworm/libsaimetadata-dev_*.deb
        **/bookworm/syncd-vs_*.deb
        **/bookworm/libnl-3-200_*.deb
        **/bookworm/libnl-3-dev_*.deb
        **/bookworm/libnl-genl-3-200_*.deb
        **/bookworm/libnl-genl-3-dev_*.deb
        **/bookworm/libnl-route-3-200_*.deb
        **/bookworm/libnl-route-3-dev_*.deb
        **/bookworm/libnl-nf-3-200_*.deb
        **/bookworm/libnl-nf-3-dev_*.deb
        **/bookworm/libyang_*.deb
        **/bookworm/libdashapi*.deb
    displayName: "Download dependencies"
  - script: |
      set -ex
      sudo dpkg -i $(find download -type f -name '*.deb')
      rm -rf download
    workingDirectory: $(Build.ArtifactStagingDirectory)
    displayName: "Install libnl3, sonic swss common and sairedis"
  - script: |
      set -ex
      tar czf pytest.tgz tests
      cp -r pytest.tgz $(Build.ArtifactStagingDirectory)/
      if [ '${{ parameters.archive_gcov }}' == True ]; then
         export ENABLE_GCOV=y
         echo BUILD_DIR=$(pwd) > build.info
      fi
      if [ '${{ parameters.asan }}' == True ]; then
         export ENABLE_ASAN=y
      fi
      ./autogen.sh
      dpkg-buildpackage -us -uc -b -j$(nproc) && cp ../*.deb .
    displayName: "Compile sonic swss"
  - publish: $(System.DefaultWorkingDirectory)/
    artifact: ${{ parameters.artifact_name }}
    displayName: "Archive swss debian packages"
  - publish: $(Build.ArtifactStagingDirectory)/
    artifact: sonic-swss-pytests
    displayName: "Archive swss pytests"
    condition: eq('${{ parameters.archive_pytests }}', true)
